import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import * as fs from 'fs';
import * as path from 'path';
import { format } from 'date-fns';
import { ko } from 'date-fns/locale';
import * as db from '../db';
import { attachments } from '../../shared/schema';
import { eq } from 'drizzle-orm';

export interface PurchaseOrderPDFData {
  orderNumber: string;
  orderDate: Date;
  deliveryDate?: Date | null;
  projectName?: string;
  vendorName?: string;
  vendorContact?: string;
  vendorEmail?: string;
  items: Array<{
    category?: string;
    subCategory1?: string;
    subCategory2?: string;
    item?: string;
    name: string;
    specification?: string;
    quantity: number;
    unit: string;
    unitPrice: number;
    price: number;
    deliveryLocation?: string;
  }>;
  totalAmount: number;
  notes?: string;
  companyName?: string;
  companyAddress?: string;
  companyPhone?: string;
  companyFax?: string;
  receiver?: string;
  manager?: string;
  site?: string;
}

export class PDFGenerationService {
  private static uploadDir = process.env.VERCEL 
    ? '/tmp/pdf' // Vercel only allows writing to /tmp
    : path.join(process.cwd(), 'uploads/pdf');

  /**
   * Î∞úÏ£ºÏÑú PDF ÏÉùÏÑ± Î∞è Ï≤®Î∂ÄÌååÏùº Îì±Î°ù
   */
  static async generatePurchaseOrderPDF(
    orderId: number,
    orderData: PurchaseOrderPDFData,
    userId: string
  ): Promise<{ success: boolean; pdfPath?: string; attachmentId?: number; error?: string; pdfBuffer?: Buffer }> {
    try {
      console.log(`üìÑ [PDFGenerator] Î∞úÏ£ºÏÑú PDF ÏÉùÏÑ± ÏãúÏûë: Order ID ${orderId}`);

      const timestamp = Date.now();
      const fileName = `PO_${orderData.orderNumber}_${timestamp}.pdf`;

      // PDF ÏÉùÏÑ± Î∞©Ïãù ÏÑ†ÌÉù
      let pdfBuffer: Buffer;
      
      // Initialize tempDir for local environment (needed for file saving later)
      const tempDir = path.join(this.uploadDir, String(new Date().getFullYear()), String(new Date().getMonth() + 1).padStart(2, '0'));
      
      if (process.env.VERCEL) {
        // Vercel: Î∏åÎùºÏö∞Ï†Ä ÏóÜÏù¥ ÏßÅÏ†ë PDF ÏÉùÏÑ± (Îçî ÏïàÏ†ïÏ†Å)
        console.log('üìÑ [PDFGenerator] Vercel ÌôòÍ≤Ω: PDFKitÏúºÎ°ú PDF ÏßÅÏ†ë ÏÉùÏÑ±');
        pdfBuffer = await this.generatePDFWithPDFKit(orderData);
      } else {
        // Î°úÏª¨: HTML ÌÖúÌîåÎ¶øÏùÑ ÌÜµÌïú PDF ÏÉùÏÑ±
        console.log('üìÑ [PDFGenerator] Î°úÏª¨ ÌôòÍ≤Ω: HTML ÌÖúÌîåÎ¶øÏúºÎ°ú PDF ÏÉùÏÑ±');
        
        // Î°úÏª¨ ÌôòÍ≤ΩÏóêÏÑúÎßå ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        console.log(`üìÅ [PDFGenerator] ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Ï§ë: ${tempDir}`);
        
        if (!fs.existsSync(tempDir)) {
          try {
            fs.mkdirSync(tempDir, { recursive: true });
            console.log(`‚úÖ [PDFGenerator] ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± ÏôÑÎ£å: ${tempDir}`);
          } catch (dirError) {
            console.error(`‚ùå [PDFGenerator] ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Ïã§Ìå®: ${tempDir}`, dirError);
            throw new Error(`ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Ïã§Ìå®: ${dirError instanceof Error ? dirError.message : 'Unknown error'}`);
          }
        }
        
        const htmlContent = this.generateHTMLTemplate(orderData);
        pdfBuffer = await this.convertHTMLToPDFFromString(htmlContent);
      }
      
      let filePath = '';
      let attachmentId: number;

      if (process.env.VERCEL) {
        // Vercel ÌôòÍ≤Ω: PDF Îç∞Ïù¥ÌÑ∞Î•º Base64Î°ú DBÏóê ÏßÅÏ†ë Ï†ÄÏû•
        const base64Data = pdfBuffer.toString('base64');
        
        let attachment;
        try {
          [attachment] = await db.db.insert(attachments).values({
            orderId,
            originalName: fileName,
            storedName: fileName,
            filePath: `db://${fileName}`, // DB Ï†ÄÏû• ÏúÑÏπò ÌëúÏãú
            fileSize: pdfBuffer.length,
            mimeType: 'application/pdf',
            uploadedBy: userId,
            fileData: base64Data // PDF Îç∞Ïù¥ÌÑ∞Î•º Base64Î°ú DBÏóê Ï†ÄÏû•
          }).returning();
        } catch (error) {
          // Fallback: save without fileData for older schema compatibility
          console.warn('Failed to save with fileData, using fallback:', error);
          [attachment] = await db.db.insert(attachments).values({
            orderId,
            originalName: fileName,
            storedName: fileName,
            filePath: `db://${fileName}`,
            fileSize: pdfBuffer.length,
            mimeType: 'application/pdf',
            uploadedBy: userId,
          }).returning();
        }
        
        attachmentId = attachment.id;
        filePath = `db://${fileName}`;
        
        console.log(`‚úÖ [PDFGenerator] PDF ÏÉùÏÑ± ÏôÑÎ£å (DB Ï†ÄÏû•): ${fileName}, Attachment ID: ${attachment.id}, ÌÅ¨Í∏∞: ${Math.round(base64Data.length / 1024)}KB`);
      } else {
        // Î°úÏª¨ ÌôòÍ≤Ω: ÌååÏùº ÏãúÏä§ÌÖúÏóê Ï†ÄÏû• + Base64 Î∞±ÏóÖ
        filePath = path.join(tempDir, fileName);
        fs.writeFileSync(filePath, pdfBuffer);
        
        // Also save Base64 data as backup for Vercel deployment
        const base64Data = pdfBuffer.toString('base64');
        
        let attachment;
        try {
          [attachment] = await db.db.insert(attachments).values({
            orderId,
            originalName: fileName,
            storedName: fileName,
            filePath: `db://${fileName}`, // Changed to use db:// prefix for consistency
            fileSize: pdfBuffer.length,
            mimeType: 'application/pdf',
            uploadedBy: userId,
            fileData: base64Data // Save Base64 data for Vercel compatibility
          }).returning();
        } catch (error) {
          // Fallback: save without fileData for older schema compatibility
          console.warn('Failed to save with fileData, using fallback:', error);
          [attachment] = await db.db.insert(attachments).values({
            orderId,
            originalName: fileName,
            storedName: fileName,
            filePath: filePath, // Use original filesystem path as fallback
            fileSize: pdfBuffer.length,
            mimeType: 'application/pdf',
            uploadedBy: userId,
          }).returning();
        }
        
        attachmentId = attachment.id;
        console.log(`‚úÖ [PDFGenerator] PDF ÏÉùÏÑ± ÏôÑÎ£å: ${filePath}, Attachment ID: ${attachment.id}`);
      }

      return {
        success: true,
        pdfPath: filePath,
        attachmentId,
        pdfBuffer: process.env.VERCEL ? pdfBuffer : undefined
      };

    } catch (error) {
      console.error('‚ùå [PDFGenerator] PDF ÏÉùÏÑ± Ïò§Î•ò:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'PDF ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù'
      };
    }
  }

  /**
   * HTML ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
   */
  private static generateHTMLTemplate(data: PurchaseOrderPDFData): string {
    const formatDate = (date?: Date | null) => {
      if (!date) return '-';
      return format(new Date(date), 'yyyyÎÖÑ MMÏõî ddÏùº', { locale: ko });
    };

    const formatCurrency = (amount: number) => {
      return new Intl.NumberFormat('ko-KR', {
        style: 'currency',
        currency: 'KRW'
      }).format(amount);
    };

    const itemRows = data.items.map((item, index) => `
      <tr>
        <td class="text-center">${index + 1}</td>
        <td>${item.category || '-'}</td>
        <td>${item.subCategory1 || '-'}</td>
        <td>${item.subCategory2 || '-'}</td>
        <td>${item.item || item.name}</td>
        <td>${item.specification || '-'}</td>
        <td class="text-right">${item.quantity}</td>
        <td class="text-center">${item.unit}</td>
        <td class="text-right">${formatCurrency(item.unitPrice)}</td>
        <td class="text-right">${formatCurrency(item.price)}</td>
        <td>${item.deliveryLocation || '-'}</td>
      </tr>
    `).join('');

    return `
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Íµ¨Îß§ Î∞úÏ£ºÏÑú - ${data.orderNumber}</title>
  <style>
    @page {
      size: A4;
      margin: 15mm;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Malgun Gothic', 'Arial', sans-serif;
      font-size: 10pt;
      line-height: 1.5;
      color: #333;
    }
    
    .container {
      max-width: 210mm;
      margin: 0 auto;
      padding: 20px;
    }
    
    .header {
      text-align: center;
      margin-bottom: 30px;
    }
    
    .header h1 {
      font-size: 24pt;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .header .subtitle {
      font-size: 11pt;
      color: #666;
    }
    
    .info-section {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    
    .info-group {
      flex: 1;
    }
    
    .info-item {
      margin-bottom: 5px;
    }
    
    .info-item strong {
      display: inline-block;
      width: 100px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    
    th, td {
      border: 1px solid #ddd;
      padding: 5px;
      font-size: 9pt;
    }
    
    th {
      background-color: #f5f5f5;
      font-weight: bold;
      text-align: center;
    }
    
    .text-center {
      text-align: center;
    }
    
    .text-right {
      text-align: right;
    }
    
    .total-row {
      background-color: #f9f9f9;
      font-weight: bold;
    }
    
    .notes-section {
      margin: 20px 0;
      padding: 10px;
      border: 1px solid #ddd;
      background-color: #fafafa;
    }
    
    .signature-section {
      margin-top: 30px;
      display: flex;
      justify-content: space-between;
    }
    
    .signature-box {
      width: 18%;
      border: 1px solid #ddd;
      padding: 5px;
      text-align: center;
    }
    
    .signature-box .title {
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .signature-box .signature-area {
      height: 50px;
      border-top: 1px solid #ddd;
      margin-top: 5px;
    }
    
    .footer {
      text-align: center;
      margin-top: 40px;
      padding-top: 20px;
      border-top: 2px solid #333;
    }
    
    .company-info {
      margin-top: 10px;
      font-size: 9pt;
      color: #666;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Íµ¨Îß§ Î∞úÏ£ºÏÑú</h1>
      <div class="subtitle">Purchase Order</div>
    </div>
    
    <div class="info-section">
      <div class="info-group">
        <div class="info-item"><strong>Î∞úÏ£ºÏÑú Î≤àÌò∏:</strong> ${data.orderNumber}</div>
        <div class="info-item"><strong>ÏûëÏÑ±Ïùº:</strong> ${formatDate(data.orderDate)}</div>
        <div class="info-item"><strong>ÌòÑÏû•:</strong> ${data.site || '-'}</div>
        <div class="info-item"><strong>ÌîÑÎ°úÏ†ùÌä∏:</strong> ${data.projectName || '-'}</div>
      </div>
      <div class="info-group">
        <div class="info-item"><strong>ÎÇ©Ìíà Ìù¨ÎßùÏùº:</strong> ${formatDate(data.deliveryDate)}</div>
        <div class="info-item"><strong>Í±∞ÎûòÏ≤ò:</strong> ${data.vendorName || '-'}</div>
        <div class="info-item"><strong>ÏûêÏû¨ Ïù∏ÏàòÏûê:</strong> ${data.receiver || '-'}</div>
        <div class="info-item"><strong>Î≥∏ÏÇ¨ Îã¥ÎãπÏûê:</strong> ${data.manager || '-'}</div>
      </div>
    </div>
    
    <table>
      <thead>
        <tr>
          <th style="width: 5%">No</th>
          <th style="width: 10%">ÎåÄÎ∂ÑÎ•ò</th>
          <th style="width: 10%">Ï§ëÎ∂ÑÎ•ò</th>
          <th style="width: 10%">ÏÜåÎ∂ÑÎ•ò</th>
          <th style="width: 15%">ÌíàÎ™©Î™Ö</th>
          <th style="width: 12%">Í∑úÍ≤©</th>
          <th style="width: 8%">ÏàòÎüâ</th>
          <th style="width: 5%">Îã®ÏúÑ</th>
          <th style="width: 10%">Îã®Í∞Ä</th>
          <th style="width: 10%">Í∏àÏï°</th>
          <th style="width: 5%">ÎÇ©ÌíàÏ≤ò</th>
        </tr>
      </thead>
      <tbody>
        ${itemRows}
        <tr class="total-row">
          <td colspan="9" class="text-center">Ìï©Í≥Ñ</td>
          <td class="text-right">${formatCurrency(data.totalAmount)}</td>
          <td></td>
        </tr>
      </tbody>
    </table>
    
    ${data.notes ? `
    <div class="notes-section">
      <strong>ÌäπÏù¥ÏÇ¨Ìï≠:</strong>
      <div style="margin-top: 5px;">${data.notes}</div>
    </div>
    ` : ''}
    
    <div class="signature-section">
      <div class="signature-box">
        <div class="title">Îã¥Îãπ</div>
        <div class="signature-area"></div>
      </div>
      <div class="signature-box">
        <div class="title">Í≥µÎ¨¥</div>
        <div class="signature-area"></div>
      </div>
      <div class="signature-box">
        <div class="title">ÌåÄÏû•</div>
        <div class="signature-area"></div>
      </div>
      <div class="signature-box">
        <div class="title">ÏûÑÏõê</div>
        <div class="signature-area"></div>
      </div>
      <div class="signature-box">
        <div class="title">ÏÇ¨Ïû•</div>
        <div class="signature-area"></div>
      </div>
    </div>
    
    <div class="footer">
      <strong>${data.companyName || 'ÌöåÏÇ¨Î™Ö'}</strong>
      <div class="company-info">
        <div>${data.companyAddress || 'Ï£ºÏÜå: ÏÑúÏö∏ÌäπÎ≥ÑÏãú'}</div>
        <div>Ï†ÑÌôî: ${data.companyPhone || '02-0000-0000'} | Ìå©Ïä§: ${data.companyFax || '02-0000-0001'}</div>
      </div>
    </div>
  </div>
</body>
</html>
    `;
  }

  /**
   * HTMLÏùÑ PDFÎ°ú Î≥ÄÌôò (Playwright ÏÇ¨Ïö© - ÌååÏùº Í∏∞Î∞ò)
   */
  private static async convertHTMLToPDF(htmlPath: string): Promise<Buffer> {
    const { chromium } = await import('playwright');
    
    const browser = await chromium.launch({ headless: true });
    const page = await browser.newPage();
    
    try {
      // HTML ÌååÏùº Î°úÎìú
      await page.goto(`file://${path.resolve(htmlPath)}`, {
        waitUntil: 'networkidle'
      });
      
      // PDF ÏÉùÏÑ±
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '15mm',
          right: '15mm',
          bottom: '15mm',
          left: '15mm'
        }
      });
      
      return pdfBuffer;
      
    } finally {
      await browser.close();
    }
  }

  /**
   * PDFÎ•º ÏàúÏàò JavaScriptÎ°ú ÏÉùÏÑ± (Î∏åÎùºÏö∞Ï†Ä ÏùòÏ°¥ÏÑ± Ï†úÍ±∞)
   */
  private static async convertHTMLToPDFFromString(htmlContent: string): Promise<Buffer> {
    if (process.env.VERCEL) {
      // Vercel ÌôòÍ≤Ω: PDFKitÏúºÎ°ú ÏßÅÏ†ë PDF ÏÉùÏÑ± (Î∏åÎùºÏö∞Ï†Ä Î∂àÌïÑÏöî)
      return await this.generatePDFWithPDFKit(htmlContent);
    } else {
      // Î°úÏª¨ ÌôòÍ≤Ω: Í∏∞Ï°¥ Playwright ÏÇ¨Ïö©
      try {
        const { chromium } = await import('playwright');
        
        const browser = await chromium.launch({ headless: true });
        const page = await browser.newPage();
        
        try {
          await page.setContent(htmlContent, {
            waitUntil: 'networkidle'
          });
          
          const pdfBuffer = await page.pdf({
            format: 'A4',
            printBackground: true,
            margin: {
              top: '15mm',
              right: '15mm',
              bottom: '15mm',
              left: '15mm'
            }
          });
          
          return pdfBuffer;
          
        } finally {
          await browser.close();
        }
      } catch (playwrightError) {
        console.warn('‚ö†Ô∏è Playwright Ïã§Ìå®, PDFKitÏúºÎ°ú ÎåÄÏ≤¥:', playwrightError);
        // Î°úÏª¨ÏóêÏÑúÎèÑ Playwright Ïã§Ìå® Ïãú PDFKit ÏÇ¨Ïö©
        return await this.generatePDFWithPDFKit(htmlContent);
      }
    }
  }

  /**
   * PDFKitÏúºÎ°ú Î∞úÏ£ºÏÑú PDF ÏßÅÏ†ë ÏÉùÏÑ± (Î∏åÎùºÏö∞Ï†Ä ÏùòÏ°¥ÏÑ± Ï†úÍ±∞)
   */
  private static async generatePDFWithPDFKit(orderData: PurchaseOrderPDFData): Promise<Buffer> {
    const PDFKitDocument = (await import('pdfkit')).default;
    
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFKitDocument({ 
          size: 'A4',
          margins: { top: 50, bottom: 50, left: 50, right: 50 }
        });
        
        const buffers: Buffer[] = [];
        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => resolve(Buffer.concat(buffers)));
        doc.on('error', reject);

        // ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï (Í∏∞Î≥∏ Ìè∞Ìä∏ ÏÇ¨Ïö©)
        doc.font('Helvetica');
        
        // Ï†úÎ™©
        doc.fontSize(20).text('Íµ¨Îß§ Î∞úÏ£ºÏÑú', { align: 'center' });
        doc.fontSize(12).text('Purchase Order', { align: 'center' });
        doc.moveDown(2);
        
        // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìï®Ïàò
        const formatDate = (date?: Date | null) => {
          if (!date) return '-';
          return format(new Date(date), 'yyyyÎÖÑ MMÏõî ddÏùº', { locale: ko });
        };

        // Í∏àÏï° Ìè¨Îß∑ÌåÖ Ìï®Ïàò
        const formatCurrency = (amount: number) => {
          return new Intl.NumberFormat('ko-KR', {
            style: 'currency',
            currency: 'KRW'
          }).format(amount);
        };
        
        // Î∞úÏ£ºÏÑú Ï†ïÎ≥¥ ÏÑπÏÖò
        const startY = doc.y;
        doc.fontSize(10);
        
        // Ï¢åÏ∏° Ï†ïÎ≥¥
        doc.text(`Î∞úÏ£ºÏÑú Î≤àÌò∏: ${orderData.orderNumber}`, 50, startY);
        doc.text(`ÏûëÏÑ±Ïùº: ${formatDate(orderData.orderDate)}`, 50, startY + 20);
        doc.text(`Í±∞ÎûòÏ≤ò: ${orderData.vendorName || '-'}`, 50, startY + 40);
        doc.text(`Îã¥ÎãπÏûê: ${orderData.vendorContact || '-'}`, 50, startY + 60);
        
        // Ïö∞Ï∏° Ï†ïÎ≥¥  
        doc.text(`ÌîÑÎ°úÏ†ùÌä∏: ${orderData.projectName || '-'}`, 300, startY);
        doc.text(`ÌòÑÏû•: ${orderData.site || '-'}`, 300, startY + 20);
        doc.text(`ÎÇ©Í∏∞Ïùº: ${formatDate(orderData.deliveryDate)}`, 300, startY + 40);
        doc.text(`Ï¥ù Í∏àÏï°: ${formatCurrency(orderData.totalAmount)}`, 300, startY + 60);
        
        doc.moveDown(5);
        
        // Íµ¨Î∂ÑÏÑ†
        doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke();
        doc.moveDown(1);
        
        // ÌíàÎ™© ÌÖåÏù¥Î∏î Ìó§Îçî
        const tableTop = doc.y;
        doc.fontSize(9);
        
        // Ìó§Îçî Î∞∞Í≤Ω
        doc.rect(50, tableTop, 495, 15).fill('#f0f0f0');
        
        // Ìó§Îçî ÌÖçÏä§Ìä∏
        doc.fillColor('black');
        doc.text('No', 55, tableTop + 3);
        doc.text('ÌíàÎ™©Î™Ö', 90, tableTop + 3);
        doc.text('Í∑úÍ≤©', 220, tableTop + 3);
        doc.text('ÏàòÎüâ', 290, tableTop + 3);
        doc.text('Îã®ÏúÑ', 330, tableTop + 3);
        doc.text('Îã®Í∞Ä', 370, tableTop + 3);
        doc.text('Í∏àÏï°', 430, tableTop + 3);
        doc.text('ÎÇ©ÌíàÏ≤ò', 490, tableTop + 3);
        
        // ÌÖåÏù¥Î∏î Í≤ΩÍ≥ÑÏÑ†
        doc.rect(50, tableTop, 495, 15).stroke();
        doc.moveDown(1.2);
        
        // ÌíàÎ™© ÌñâÎì§
        let currentY = doc.y;
        orderData.items.forEach((item, index) => {
          const rowHeight = 20;
          
          // Ìñâ Î∞∞Í≤Ω (ÏßùÏàò Ìñâ)
          if (index % 2 === 0) {
            doc.rect(50, currentY, 495, rowHeight).fill('#f9f9f9');
            doc.fillColor('black');
          }
          
          // ÌíàÎ™© Ï†ïÎ≥¥
          doc.text(`${index + 1}`, 55, currentY + 5);
          doc.text(item.name.substring(0, 15) + (item.name.length > 15 ? '...' : ''), 90, currentY + 5);
          doc.text((item.specification || '-').substring(0, 8), 220, currentY + 5);
          doc.text(item.quantity.toString(), 290, currentY + 5);
          doc.text(item.unit, 330, currentY + 5);
          doc.text(formatCurrency(item.unitPrice), 370, currentY + 5);
          doc.text(formatCurrency(item.price), 430, currentY + 5);
          doc.text(item.deliveryLocation?.substring(0, 6) || '-', 490, currentY + 5);
          
          // Ìñâ Í≤ΩÍ≥ÑÏÑ†
          doc.rect(50, currentY, 495, rowHeight).stroke();
          
          currentY += rowHeight;
        });
        
        // Ìï©Í≥Ñ Ìñâ
        doc.rect(50, currentY, 495, 20).fill('#e0e0e0');
        doc.fillColor('black');
        doc.fontSize(10).text('Ìï©Í≥Ñ', 55, currentY + 5);
        doc.text(formatCurrency(orderData.totalAmount), 430, currentY + 5);
        doc.rect(50, currentY, 495, 20).stroke();
        
        doc.moveDown(2);
        
        // ÌäπÏù¥ÏÇ¨Ìï≠
        if (orderData.notes) {
          doc.fontSize(10).text('ÌäπÏù¥ÏÇ¨Ìï≠:', 50, doc.y);
          doc.fontSize(9).text(orderData.notes, 50, doc.y + 15);
          doc.moveDown(2);
        }
        
        // ÌïòÎã® ÏÑúÎ™ÖÎûÄ
        doc.moveDown(2);
        const signY = doc.y;
        const signBoxWidth = 80;
        const signBoxHeight = 50;
        
        ['Îã¥Îãπ', 'Í≥µÎ¨¥', 'ÌåÄÏû•', 'ÏûÑÏõê', 'ÏÇ¨Ïû•'].forEach((title, index) => {
          const x = 50 + (index * 95);
          doc.rect(x, signY, signBoxWidth, signBoxHeight).stroke();
          doc.fontSize(9).text(title, x + 30, signY + 5);
        });
        
        doc.end();
        
      } catch (error) {
        reject(error);
      }
    });
  }
  

  /**
   * Í∏∞Ï°¥ Î∞úÏ£ºÏÑúÏóê ÎåÄÌï¥ PDF Ïû¨ÏÉùÏÑ±
   */
  static async regeneratePDF(
    orderId: number,
    orderData: PurchaseOrderPDFData,
    userId: string
  ): Promise<{ success: boolean; pdfPath?: string; attachmentId?: number; error?: string }> {
    try {
      // Í∏∞Ï°¥ PDF Ï≤®Î∂ÄÌååÏùº ÏÇ≠Ï†ú
      const existingAttachments = await db.db
        .select()
        .from(attachments)
        .where(eq(attachments.orderId, orderId));
      
      for (const attachment of existingAttachments) {
        if (attachment.mimeType === 'application/pdf' && attachment.originalName.startsWith('PO_')) {
          // ÌååÏùº ÏÇ≠Ï†ú
          if (fs.existsSync(attachment.filePath)) {
            fs.unlinkSync(attachment.filePath);
          }
          // DB Î†àÏΩîÎìú ÏÇ≠Ï†ú
          await db.db.delete(attachments).where(eq(attachments.id, attachment.id));
        }
      }
      
      // ÏÉà PDF ÏÉùÏÑ±
      return await this.generatePurchaseOrderPDF(orderId, orderData, userId);
      
    } catch (error) {
      console.error('‚ùå [PDFGenerator] PDF Ïû¨ÏÉùÏÑ± Ïò§Î•ò:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'PDF Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù'
      };
    }
  }
}