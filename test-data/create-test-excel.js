import XLSX from 'xlsx';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 테스트 데이터 생성 - 중복 항목 포함
const testData = [
  // 헤더
  ['프로젝트', '거래처', '이메일', '납기일', '품목명', '규격', '단위', '수량', '단가', '금액', '대분류', '중분류', '소분류', '비고'],
  
  // 정상 데이터
  ['서울타워 신축', '삼성물산', 'samsung@samsung.com', '2024-12-31', '철근', 'HD10', 'TON', '100', '850000', '85000000', '자재', '철강', '철근', '정상 항목'],
  ['서울타워 신축', 'LG건설', 'lg@lgcns.com', '2024-12-25', '시멘트', '포틀랜드', 'TON', '200', '120000', '24000000', '자재', '시멘트', '일반', '정상 항목'],
  
  // 완전 중복 (행 2와 동일)
  ['서울타워 신축', '삼성물산', 'samsung@samsung.com', '2024-12-31', '철근', 'HD10', 'TON', '100', '850000', '85000000', '자재', '철강', '철근', '완전 중복'],
  
  // 유사 중복 (행 2와 수량만 다름)
  ['서울타워 신축', '삼성물산', 'samsung@samsung.com', '2024-12-31', '철근', 'HD10', 'TON', '150', '850000', '127500000', '자재', '철강', '철근', '수량 다른 중복'],
  
  // 거래처명 오타
  ['부산항 개발', '삼섬물산', 'samsung@samsung.com', '2025-01-15', '콘크리트', 'C25', 'M3', '500', '85000', '42500000', '', '', '', '거래처명 오타'],
  
  // 이메일 형식 오류
  ['인천공항 확장', '현대건설', 'hyundai@', '2025-02-20', '강관', 'Φ100', 'M', '1000', '25000', '25000000', '', '', '', '이메일 오류'],
  
  // 필수 필드 누락
  ['', '대우건설', 'daewoo@daewoo.com', '2025-01-30', '벽돌', '적벽돌', 'EA', '10000', '150', '1500000', '', '', '', '프로젝트명 누락'],
  
  // 날짜 형식 오류
  ['제주 리조트', '포스코건설', 'posco@posco.com', '2024/12/31', '철골', 'H형강', 'TON', '50', '950000', '47500000', '', '', '', '날짜 형식'],
  
  // 완전 중복 그룹 (서로 중복)
  ['강남 오피스', 'GS건설', 'gs@gs.com', '2025-03-15', '유리', '강화유리 10T', 'M2', '300', '120000', '36000000', '자재', '유리', '강화', '중복 그룹1'],
  ['강남 오피스', 'GS건설', 'gs@gs.com', '2025-03-15', '유리', '강화유리 10T', 'M2', '300', '120000', '36000000', '자재', '유리', '강화', '중복 그룹1'],
  
  // 유사 항목 (거래처 약간 다름)
  ['판교 테크노밸리', '삼성물산 건설부문', 'samsung@samsung.com', '2025-04-30', '타일', '포세린 600x600', 'M2', '2000', '45000', '90000000', '', '', '', '유사 거래처'],
  
  // 카테고리 누락 (자동 매핑 테스트)
  ['송도 신도시', '롯데건설', 'lotte@lotte.com', '2025-05-15', '페인트', '수성페인트', 'L', '500', '8000', '4000000', '', '', '', '카테고리 자동'],
  
  // 금액 자동 계산 테스트
  ['용산 개발', '대림산업', 'daelim@daelim.com', '2025-06-30', '모래', '강모래', 'M3', '100', '35000', '', '자재', '골재', '모래', '금액 자동계산'],
  
  // 특수문자 포함
  ['해운대 L.C.T', '현대건설(주)', 'hec@hdec.co.kr', '2025-07-31', '파이프[특수]', 'STS-304 #150', 'M', '200', '45000', '9000000', '', '', '', '특수문자']
];

// Excel 파일 생성
const wb = XLSX.utils.book_new();
const ws = XLSX.utils.aoa_to_sheet(testData);

// 열 너비 설정
ws['!cols'] = [
  { wch: 15 }, // 프로젝트
  { wch: 15 }, // 거래처
  { wch: 25 }, // 이메일
  { wch: 12 }, // 납기일
  { wch: 15 }, // 품목명
  { wch: 15 }, // 규격
  { wch: 8 },  // 단위
  { wch: 8 },  // 수량
  { wch: 10 }, // 단가
  { wch: 12 }, // 금액
  { wch: 10 }, // 대분류
  { wch: 10 }, // 중분류
  { wch: 10 }, // 소분류
  { wch: 20 }  // 비고
];

XLSX.utils.book_append_sheet(wb, ws, '발주데이터');

// 파일 저장
const outputPath = path.join(__dirname, 'test-purchase-order-with-duplicates.xlsx');
XLSX.writeFile(wb, outputPath);

console.log(`✅ 테스트 Excel 파일 생성 완료: ${outputPath}`);
console.log('\n📊 테스트 데이터 구성:');
console.log('- 정상 데이터: 2개');
console.log('- 완전 중복: 3개 (행 2와 4, 행 11과 12)');
console.log('- 유사 중복: 2개 (수량만 다름, 거래처명 약간 다름)');
console.log('- 거래처 오타: 1개 (삼섬물산)');
console.log('- 이메일 오류: 1개');
console.log('- 필수 필드 누락: 1개');
console.log('- 날짜 형식 오류: 1개');
console.log('- 카테고리 자동 매핑 대상: 2개');
console.log('- 금액 자동 계산: 1개');
console.log('- 특수문자 포함: 1개');
console.log('\n총 15개 행 (헤더 포함)');
console.log('\n이 파일을 사용하여 다음 기능을 테스트할 수 있습니다:');
console.log('1. 중복 감지 (완전/유사)');
console.log('2. 거래처 검증 및 유사 거래처 제안');
console.log('3. 이메일 유효성 검사');
console.log('4. 필수 필드 검증');
console.log('5. 날짜 형식 자동 수정');
console.log('6. 카테고리 자동 매핑');
console.log('7. 금액 자동 계산');